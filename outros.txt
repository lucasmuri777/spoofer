  public class Spoofer
    {
        public static class HWID
        {
            public static Regedit regeditOBJ = new Regedit(@"SYSTEM\CurrentControlSet\Control\IDConfigDB\Hardware Profiles\0001");
            public static readonly string Key = "HwProfileGuid";

            public static string GetValue()
            {
                return regeditOBJ.Read(Key);
            }

            public static bool SetValue(object value)
            {
                return regeditOBJ.Write(Key, value);
            }

            public static StringBuilder Log = new StringBuilder();
            public static bool Spoof()
            {
                Log.Clear();
                string oldValue = GetValue();
                bool result =  SetValue("{" + Guid.NewGuid().ToString() + "}");
                if (result)
                {
                    Log.Append("  [SPOOFER] HWID Changed from " + oldValue + " to " + GetValue());
                }
                else
                {
                    Log.AppendLine("  [SPOOFER] Error accessing the Registry... Maybe run as admin");
                }
                return result;
            }
        }

        public static class PCGuid
        {
            public static Regedit regeditOBJ = new Regedit(@"SOFTWARE\Microsoft\Cryptography");
            public static readonly string Key = "MachineGuid";

            public static string GetValue()
            {
                return regeditOBJ.Read(Key);
            }

            public static bool SetValue(object value)
            {
                return regeditOBJ.Write(Key, value);
            }

            public static StringBuilder Log = new StringBuilder();
            public static bool Spoof()
            {
                Log.Clear();
                string oldValue = GetValue();
                bool result = SetValue(Guid.NewGuid().ToString());
                if (result)
                {
                    Log.Append("  [SPOOFER] Guid Changed from " + oldValue + " to " + GetValue());
                }
                else
                {
                    Log.AppendLine("  [SPOOFER] Error accessing the Registry... Maybe run as admin");
                }
                return result;
            }
        }

        public static class PCName
        {
            public static Regedit regeditOBJ = new Regedit(@"SYSTEM\CurrentControlSet\Control\ComputerName\ActiveComputerName");
            public static readonly string Key = "ComputerName";

            public static string GetValue()
            {
                return regeditOBJ.Read(Key);
            }

            public static bool SetValue(object value)
            {
                return regeditOBJ.Write(Key, value);
            }

            public static StringBuilder Log = new StringBuilder();
            public static bool Spoof()
            {
                Log.Clear();
                string oldValue = GetValue();
                bool result = SetValue("DESKTOP-" + Utilities.GenerateString(15));
                if (result)
                {
                    Log.Append("  [SPOOFER] Computer Name Changed from " + oldValue + " to " + GetValue());
                }
                else
                {
                    Log.AppendLine("  [SPOOFER] Error accessing the Registry... Maybe run as admin");
                }
                return result;
            }
        }

        public static class ProductId
        {
            public static Regedit regeditOBJ = new Regedit(@"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion");
            public static readonly string Key = "ProductID";

            public static string GetValue()
            {
                return regeditOBJ.Read(Key);
            }

            public static bool SetValue(object value)
            {
                return regeditOBJ.Write(Key, value);
            }

            public static StringBuilder Log = new StringBuilder();
            public static bool Spoof()
            {
                Log.Clear();
                string oldValue = GetValue();
                bool result = SetValue(Utilities.GenerateString(5) + "-" + Utilities.GenerateString(5) + "-" + Utilities.GenerateString(5) + "-" + Utilities.GenerateString(5));
                if(result)
                {
                    Log.AppendLine("  [SPOOFER] Computer ProductID Changed from " + oldValue + " to " + GetValue());
                }
                else
                {
                    Log.AppendLine("  [SPOOFER] Error accessing the Registry... Maybe run as admin");
                }
                return result;
            }
        }

        public class Regedit
        {
            private string regeditPath = string.Empty;
            public Regedit(string regeditPath)
            {
                this.regeditPath = regeditPath;
            }

            public string Read(string keyName)
            {
                try
                {
                    using (RegistryKey key = Registry.LocalMachine.OpenSubKey(regeditPath))
                    {
                        if (key != null)
                        {
                            return key.GetValue(keyName).ToString();
                        }
                        else
                        {
                            //Console.WriteLine("  [Regedit] SubKey Doesn't founded!");
                            return "ERR";
                        }
                    }
                }
                catch (Exception ex)
                {
                    //Console.WriteLine("  [Regedit] Error accessing the Registry... Maybe run as admin?\n\n" + ex.ToString());
                    return "ERR";
                }
            }

            public bool Write(string keyName, object value)
            {
                try
                {
                    using (RegistryKey key = Registry.LocalMachine.OpenSubKey(regeditPath))
                    {
                        if (key != null)
                        {
                            key.SetValue(keyName, value);
                            return true;
                        }
                        else
                        {
                            //Console.WriteLine("  [Regedit] SubKey Doesn't founded!");
                            return false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    //Console.WriteLine("  [Regedit] Error accessing the Registry... Maybe run as admin? -" + ex.ToString());
                    return false;
                }
            }
        }

        public static class Utilities
        {
            private static Random rand = new Random();
            public const string Alphabet = "ABCDEF0123456789";
            private static Random random = new Random();
            public const string Alphabet1 = "abcdef0123456789";

            public static string GenerateString(int size)
            {
                char[] array = new char[size];
                for (int i = 0; i < size; i++)
                {
                    array[i] = Alphabet[rand.Next(Alphabet.Length)];
                }
                return new string(array);
            }
        }
    }
}

  public static class MacAddressChanger
{
    public static string GetMacAddress()
    {
        NetworkInterface[] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces();

        foreach (NetworkInterface nic in networkInterfaces)
        {
            if (nic.OperationalStatus == OperationalStatus.Up && !nic.Description.ToLower().Contains("virtual"))
            {
                PhysicalAddress macAddress = nic.GetPhysicalAddress();
                byte[] bytes = macAddress.GetAddressBytes();
                string macAddressStr = string.Join(":", bytes.Select(b => b.ToString("X2")));
                return macAddressStr;
            }
        }

        return "Não foi possível obter o endereço MAC.";
    }

    public static void SpoofMacAddress()
    {
        NetworkInterface activeInterface = NetworkInterface.GetAllNetworkInterfaces()
            .FirstOrDefault(ni => ni.OperationalStatus == OperationalStatus.Up && ni.NetworkInterfaceType != NetworkInterfaceType.Loopback);

        if (activeInterface != null)
        {
            string networkInterfaceName = activeInterface.Name;
            string macAddress = RandomMacAddress();
            if (SetMacAddress(networkInterfaceName, macAddress))
            {
                Console.WriteLine("Endereço MAC spoofado com sucesso!");
            }
            else
            {
                Console.WriteLine("Falha ao spoofar o endereço MAC.");
            }
        }
        else
        {
            Console.WriteLine("Nenhuma interface de rede ativa encontrada.");
        }
    }

    private static string RandomMacAddress()
    {
        Random random = new Random();
        byte[] macBytes = new byte[6];
        random.NextBytes(macBytes);
        macBytes[0] = (byte)(macBytes[0] & (byte)(254)); // Garante que o endereço MAC é unicast e administrado localmente
        return string.Join(":", macBytes.Select(b => b.ToString("X2")));
    }

    private static bool SetMacAddress(string networkInterfaceName, string macAddress)
    {
        try
        {
            ProcessStartInfo psi = new ProcessStartInfo
            {
                FileName = "reg.exe",
                Arguments = $"add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{{4d36e972-e325-11ce-bfc1-08002be10318}}\\{AdapterRegistryKey(networkInterfaceName)}\" /v NetworkAddress /d {macAddress} /f",
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (Process process = Process.Start(psi))
            {
                process.WaitForExit();
                return process.ExitCode == 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao alterar o endereço MAC: {ex.Message}");
            return false;
        }
    }

    private static string AdapterRegistryKey(string networkInterfaceName)
    {
        const string networkAdapterRegistryPath = @"SYSTEM\CurrentControlSet\Control\Class\{4d36e972-e325-11ce-bfc1-08002be10318}";

        RegistryKey networkAdapterKey = Registry.LocalMachine.OpenSubKey(networkAdapterRegistryPath);
        if (networkAdapterKey != null)
        {
            foreach (string subKeyName in networkAdapterKey.GetSubKeyNames())
            {
                RegistryKey subKey = networkAdapterKey.OpenSubKey(subKeyName);
                if (subKey != null)
                {
                    string adapterName = subKey.GetValue("DriverDesc") as string;
                    if (adapterName != null && adapterName.Equals(networkInterfaceName, StringComparison.OrdinalIgnoreCase))
                    {
                        return subKeyName;
                    }
                }
            }
        }

        return null;
    }
}